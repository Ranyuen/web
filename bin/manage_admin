#!/usr/bin/env php
<?php
/**
 * CUI admin account manager.
 */
if (isset($_SERVER['REMOTE_ADDR'])) {
    header('Location: /');
    exit();
}

require 'vendor/autoload.php';

use Ranyuen\App;
use Ranyuen\Model\Admin;

function doHelp()
{
    echo "* manage_admin.php *
Ctrl^C to quit.

help                      \t:Print this help.
list                      \t:List admin usernames.
add USERNAME PASSWORD     \t:Add a new user.
rm USERNAME               \t:Delete the user.
password USERNAME PASSWORD\t:Change password.
exit                      \t:Quit.
quit                      \t:Quit.
";
}

function doList()
{
    $admins = Admin::all();
    foreach ($admins as $admin) {
        echo "$admin->username\n";
    }
}

function doAdd($option)
{
    $matches = [];
    if (!preg_match('/^\s*([-_.A-Za-z0-9]{4,100}) ([ -~]{8,1024})$/', $option, $matches)) {
        echo "Invalid USERNAME or PASSWORD.\n";

        return;
    }
    $username = $matches[1];
    $rawPassword = $matches[2];
    $admin = new Admin();
    $admin->username = $username;
    $admin->setPassword($rawPassword);
    $admin->save();
    echo "ok.\n";
}

function doRm($option)
{
    $username = trim(explode(' ', trim($option))[0]);
    if (!$username) {
        echo "ok.\n";

        return;
    }
    $admin = Admin::where('username', $username)->first();
    if ($admin) {
        $admin->delete();
    }
    echo "ok.\n";
}

function doPassword($option)
{
    $matches = [];
    if (!preg_match('/^\s*(\S+) ([ -~]{8,1024})$/', $option, $matches)) {
        echo "Invalid PASSWORD.\n";

        return;
    }
    $username = $matches[1];
    $rawPassword = $matches[2];
    $admin = Admin::where('username', $username)->first();
    if ($admin) {
        $admin->setPassword($rawPassword);
        $admin->save();
    }
    echo "ok.\n";
}

function doQuit()
{
    exit();
}

class FakeReadline
{
    private $history = [];

    public function readline($prompt)
    {
        if (is_callable('readline')) {
            return readline($prompt);
        }
        echo $prompt;

        return trim(fgets(STDIN));
    }

    public function addHistory($line)
    {
        if (is_callable('readline')) {
            readline_add_history($line);
        }
        $this->history[] = $line;
    }
}

$c = (new App())->getContainer();
$c['db'];
doHelp();
$rl = new FakeReadline();
while (true) {
    $command = $rl->readline('> ');
    $reserved = [
        'help'     => 'doHelp',
        'h'        => 'doHelp',
        'list'     => 'doList',
        'l'        => 'doList',
        'add'      => 'doAdd',
        'rm'       => 'doRm',
        'password' => 'doPassword',
        'pw'       => 'doPassword',
        'exit'     => 'doQuit',
        'quit'     => 'doQuit',
        'q'        => 'doQuit',
    ];
    $isDone = false;
    foreach ($reserved as $name => $action) {
        if (preg_match("/^$name(?:\W|$)/", $command)) {
            $action(mb_substr($command, strlen($name)));
            $rl->addHistory($command);
            $isDone = true;
            break;
        }
    }
    if (!$isDone) {
        doHelp();
    }
}
// vim:ft=php:
